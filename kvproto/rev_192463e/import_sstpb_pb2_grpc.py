# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from kvproto.rev_192463e import import_sstpb_pb2 as kvproto_dot_rev__192463e_dot_import__sstpb__pb2


class ImportSSTStub(object):
  """ImportSST provides a service to import a generated SST file to a region in TiKV.

  In order to import an SST file to a region, the user should:
  1. Retrieve the meta of the region according to the SST file's range.
  2. Upload the SST file to the servers where the region's peers locate in.
  3. Issue an ingest request to the region's leader with the SST file's metadata.

  It's the user's responsibility to make sure that the SST file is uploaded to
  the servers where the region's peers locate in, before issue the ingest
  request to the region's leader. However, the region can be scheduled (so the
  location of the region's peers will be changed) or split/merged (so the range
  of the region will be changed), after the SST file is uploaded, but before
  the SST file is ingested. So, the region's epoch is provided in the SST
  file's metadata, to guarantee that the region's epoch must be the same
  between the SST file is uploaded and ingested later.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SwitchMode = channel.unary_unary(
        '/import_sstpb.ImportSST/SwitchMode',
        request_serializer=kvproto_dot_rev__192463e_dot_import__sstpb__pb2.SwitchModeRequest.SerializeToString,
        response_deserializer=kvproto_dot_rev__192463e_dot_import__sstpb__pb2.SwitchModeResponse.FromString,
        )
    self.Upload = channel.stream_unary(
        '/import_sstpb.ImportSST/Upload',
        request_serializer=kvproto_dot_rev__192463e_dot_import__sstpb__pb2.UploadRequest.SerializeToString,
        response_deserializer=kvproto_dot_rev__192463e_dot_import__sstpb__pb2.UploadResponse.FromString,
        )
    self.Ingest = channel.unary_unary(
        '/import_sstpb.ImportSST/Ingest',
        request_serializer=kvproto_dot_rev__192463e_dot_import__sstpb__pb2.IngestRequest.SerializeToString,
        response_deserializer=kvproto_dot_rev__192463e_dot_import__sstpb__pb2.IngestResponse.FromString,
        )
    self.Compact = channel.unary_unary(
        '/import_sstpb.ImportSST/Compact',
        request_serializer=kvproto_dot_rev__192463e_dot_import__sstpb__pb2.CompactRequest.SerializeToString,
        response_deserializer=kvproto_dot_rev__192463e_dot_import__sstpb__pb2.CompactResponse.FromString,
        )
    self.SetDownloadSpeedLimit = channel.unary_unary(
        '/import_sstpb.ImportSST/SetDownloadSpeedLimit',
        request_serializer=kvproto_dot_rev__192463e_dot_import__sstpb__pb2.SetDownloadSpeedLimitRequest.SerializeToString,
        response_deserializer=kvproto_dot_rev__192463e_dot_import__sstpb__pb2.SetDownloadSpeedLimitResponse.FromString,
        )
    self.Download = channel.unary_unary(
        '/import_sstpb.ImportSST/Download',
        request_serializer=kvproto_dot_rev__192463e_dot_import__sstpb__pb2.DownloadRequest.SerializeToString,
        response_deserializer=kvproto_dot_rev__192463e_dot_import__sstpb__pb2.DownloadResponse.FromString,
        )


class ImportSSTServicer(object):
  """ImportSST provides a service to import a generated SST file to a region in TiKV.

  In order to import an SST file to a region, the user should:
  1. Retrieve the meta of the region according to the SST file's range.
  2. Upload the SST file to the servers where the region's peers locate in.
  3. Issue an ingest request to the region's leader with the SST file's metadata.

  It's the user's responsibility to make sure that the SST file is uploaded to
  the servers where the region's peers locate in, before issue the ingest
  request to the region's leader. However, the region can be scheduled (so the
  location of the region's peers will be changed) or split/merged (so the range
  of the region will be changed), after the SST file is uploaded, but before
  the SST file is ingested. So, the region's epoch is provided in the SST
  file's metadata, to guarantee that the region's epoch must be the same
  between the SST file is uploaded and ingested later.
  """

  def SwitchMode(self, request, context):
    """Switch to normal/import mode.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Upload(self, request_iterator, context):
    """Upload an SST file to a server.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Ingest(self, request, context):
    """Ingest an uploaded SST file to a region.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Compact(self, request, context):
    """Compact the specific range for better performance.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetDownloadSpeedLimit(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Download(self, request, context):
    """Download an SST file from an external storage, and performs key-rewrite
    after downloading.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ImportSSTServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SwitchMode': grpc.unary_unary_rpc_method_handler(
          servicer.SwitchMode,
          request_deserializer=kvproto_dot_rev__192463e_dot_import__sstpb__pb2.SwitchModeRequest.FromString,
          response_serializer=kvproto_dot_rev__192463e_dot_import__sstpb__pb2.SwitchModeResponse.SerializeToString,
      ),
      'Upload': grpc.stream_unary_rpc_method_handler(
          servicer.Upload,
          request_deserializer=kvproto_dot_rev__192463e_dot_import__sstpb__pb2.UploadRequest.FromString,
          response_serializer=kvproto_dot_rev__192463e_dot_import__sstpb__pb2.UploadResponse.SerializeToString,
      ),
      'Ingest': grpc.unary_unary_rpc_method_handler(
          servicer.Ingest,
          request_deserializer=kvproto_dot_rev__192463e_dot_import__sstpb__pb2.IngestRequest.FromString,
          response_serializer=kvproto_dot_rev__192463e_dot_import__sstpb__pb2.IngestResponse.SerializeToString,
      ),
      'Compact': grpc.unary_unary_rpc_method_handler(
          servicer.Compact,
          request_deserializer=kvproto_dot_rev__192463e_dot_import__sstpb__pb2.CompactRequest.FromString,
          response_serializer=kvproto_dot_rev__192463e_dot_import__sstpb__pb2.CompactResponse.SerializeToString,
      ),
      'SetDownloadSpeedLimit': grpc.unary_unary_rpc_method_handler(
          servicer.SetDownloadSpeedLimit,
          request_deserializer=kvproto_dot_rev__192463e_dot_import__sstpb__pb2.SetDownloadSpeedLimitRequest.FromString,
          response_serializer=kvproto_dot_rev__192463e_dot_import__sstpb__pb2.SetDownloadSpeedLimitResponse.SerializeToString,
      ),
      'Download': grpc.unary_unary_rpc_method_handler(
          servicer.Download,
          request_deserializer=kvproto_dot_rev__192463e_dot_import__sstpb__pb2.DownloadRequest.FromString,
          response_serializer=kvproto_dot_rev__192463e_dot_import__sstpb__pb2.DownloadResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'kvproto.rev_192463e.import_sstpb.ImportSST', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
